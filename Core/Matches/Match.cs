using MBC.Core.Events;
using MBC.Core.Rounds;
using MBC.Core.Util;
using MBC.Shared;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace MBC.Core.Matches
{

    [Configuration("mbc_field_width", 10)]
    [Configuration("mbc_field_height", 10)]
    [Configuration("mbc_ship_sizes", 2, 3, 3, 4, 5)]
    [Configuration("mbc_timeout", 200)]
    [Configuration("mbc_game_mode", GameMode.Classic, null)]
    public class Match
    {

        public Match()
        {
            info = new ConfiguredMatchInfo(Config);
            Events = new EventCollection();
        }

        /// <summary>
        /// Invoked whenever an <see cref="Event"/> has been generated.
        /// </summary>
        public event MBCEventHandler Event;

        /// <summary>
        /// The <see cref="Configuration"/> used to determine game behaviour.
        /// </summary>
        private Configuration config;

        /// <summary>
        /// Gets the <see cref="Configuration"/> used to determine game behaviour.
        /// </summary>
        public Configuration Config
        {
            get
            {
                return config;
            }
        }

        /// <summary>
        /// Gets the <see cref="MatchControls"/> that handle multi-threading and automatic progression.
        /// </summary>
        [XmlIgnore]
        public MatchControls Controls
        {
            get;
            private set;
        }

        /// <summary>
        /// The <see cref="MatchInfo"/> set.
        /// </summary>
        private MatchInfo info;

        /// <summary>
        /// Gets the <see cref="MatchInfo"/> set.
        /// </summary>
        public MatchInfo Info
        {
            get
            {
                return info;
            }
        }

        /// <summary>
        /// Gets or sets the <see cref="Event"/>s that have been generated by this <see cref="Match"/>.
        /// </summary>
        private EventCollection Events
        {
            get;
            set;
        }

        /// <summary>
        /// <see cref="MatchControls.Stop()"/>s the match, ends the currently running <see cref="Round"/>, creates
        /// a <see cref="MatchEndEvent"/>, and prevents further progression of the match by setting the
        /// <see cref="RoundCollection.TargetRounds"/> to the current number of <see cref="Round"/>s.
        /// </summary>
        /// <seealso cref="MatchEvent"/>
        /// <seealso cref="RoundCollection"/>
        public void End()
        {
            Controls.Stop();
            Rounds.CurrentRound.End();
            MakeEvent(new MatchEndEvent());
            Rounds.TargetRounds = Rounds.RoundList.Count;
        }

        public void SaveToFile(File fLocation)
        {

        }

        /// <summary>
        /// Steps this <see cref="Match"/> backward by one event.
        /// </summary>
        /// <returns>True if this <see cref="Match"/> can still step backward.</returns>
        public bool StepBackward()
        {
            if (Rounds.CurrentRound.StepBackward() && Rounds.PrevRound())
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Steps this <see cref="Match"/> forward by one event.
        /// </summary>
        /// <returns>True if this <see cref="Match"/> can still step forward.</returns>
        public bool StepForward()
        {
            if (Rounds.CurrentRound.StepForward() && Rounds.NextRound())
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// Used to send a generated <see cref="Event"/> to any listeners on <see cref="Match.Event"/>.
        /// </summary>
        /// <param name="ev">The <see cref="Event"/> generated in this <see cref="Match"/>.</param>
        /// <param name="backward">True if the event was invoked backwards.</param>
        internal void RoundEventGenerated(Event ev, bool backward)
        {
            if (Event != null)
            {
                Event(ev, backward);
            }
        }

        /// <summary>
        /// Generates a <see cref="Match"/>-specific <see cref="Event"/>.
        /// </summary>
        /// <param name="ev">The <see cref="Event"/> generated.</param>
        private void MakeEvent(Event ev)
        {
            Events.AddEvent(ev);
            if (Event != null)
            {
                Event(ev, false);
            }
        }
    }
}