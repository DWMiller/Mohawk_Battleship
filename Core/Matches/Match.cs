using MBC.Core.Events;
using MBC.Core.Rounds;
using MBC.Core.Util;
using MBC.Shared;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace MBC.Core.Matches
{

    [Configuration("mbc_field_width", 10)]
    [Configuration("mbc_field_height", 10)]
    [Configuration("mbc_ship_sizes", 2, 3, 3, 4, 5)]
    [Configuration("mbc_timeout", 200)]
    [Configuration("mbc_game_mode", GameMode.Classic, null)]
    [Configuration("mbc_match_playeradd_init_only", true)]
    public class Match
    {

        private Match()
        {
            Init();
        }

        public Match(Configuration conf)
        {
            Init();
            Config = conf;
        }

        private void Init()
        {
            events = new List<MatchEvent>();
            rounds = new List<Round>();
            Controls = new MatchControls(this);
            started = false;
        }

        /// <summary>
        /// Invoked whenever an <see cref="Event"/> has been generated.
        /// </summary>
        public event MBCEventHandler Event;

        private List<Player> players;

        private List<Round> rounds;

        private List<MatchEvent> events;

        private bool started;

        /// <summary>
        /// Gets the <see cref="Configuration"/> used to determine game behaviour.
        /// </summary>
        public Configuration Config
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the <see cref="MatchControls"/> that handle multi-threading and automatic progression.
        /// </summary>
        [XmlIgnore]
        public MatchControls Controls
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the <see cref="Event"/>s that have been generated by this <see cref="Match"/>.
        /// </summary>
        private IList<MatchEvent> Events
        {
            get
            {
                return events.AsReadOnly();
            }
        }

        private IList<Round> Rounds
        {
            get
            {
                return rounds.AsReadOnly();
            }
        }

        public IList<Player> Players
        {
            get
            {
                return players.AsReadOnly();
            }
        }

        public void AddPlayer(Player plr)
        {
            if (started && Config.GetValue<bool>("mbc_match_playeradd_init_only"))
            {
                throw new InvalidOperationException("Cannot add players after the match has started (mbc_match_playeradd_init_only set to true)");
            }
        }

        public void End()
        {
            Controls.Stop();
            MakeEvent(new MatchEndEvent());
        }

        public void SaveToFile(File fLocation)
        {

        }

        /// <summary>
        /// Used to send a generated <see cref="Event"/> to any listeners on <see cref="Match.Event"/>.
        /// </summary>
        /// <param name="ev">The <see cref="Event"/> generated in this <see cref="Match"/>.</param>
        /// <param name="backward">True if the event was invoked backwards.</param>
        internal void RoundEventGenerated(Event ev, bool backward)
        {
            if (Event != null)
            {
                Event(ev, backward);
            }
        }

        /// <summary>
        /// Generates a <see cref="Match"/>-specific <see cref="Event"/>.
        /// </summary>
        /// <param name="ev">The <see cref="Event"/> generated.</param>
        private void MakeEvent(Event ev)
        {
            Events.AddEvent(ev);
            if (Event != null)
            {
                Event(ev, false);
            }
        }
    }
}