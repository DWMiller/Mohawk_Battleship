using MBC.Core.Rounds;
using MBC.Shared;
using System;

namespace MBC.Core.Events
{
    /// <summary>
    /// Provides information about a <see cref="ControllerRegister"/> that had taken too long to return from
    /// a method call in its associating <see cref="Controller"/>.
    /// </summary>
    public class PlayerTimeoutEvent : PlayerEvent
    {
        /// <summary>
        /// Stores the information provided by the <paramref name="exception"/> and bases the <see cref="Event.Message"/>
        /// from it.
        /// </summary>
        /// <param name="exception">The <see cref="ControllerTimeoutException"/> generated by a <see cref="Player"/>.</param>
        public PlayerTimeoutEvent(ControllerTimeoutException exception)
            : base(exception.Player)
        {
            TimeTaken = exception.TimeTaken;
            Method = exception.MethodName;
        }

        /// <summary>
        /// Gets a string identifying the method call made to a <see cref="Controller"/> through the
        /// associated <see cref="PlayerEvent.Register"/>.
        /// </summary>
        public string Method
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets the time taken by the <see cref="PlayerEvent.Register"/> in milliseconds.
        /// </summary>
        public int TimeTaken
        {
            get;
            private set;
        }

        protected internal override void GenerateMessage()
        {
            Message = Player + " took " + TimeTaken + "ms on \"" + Method + "\" which is a timeout.";
        }

        private void Init(int time, string method)
        {
            TimeTaken = time;
            Method = method;
        }
    }
}