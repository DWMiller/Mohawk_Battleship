using MBC.Core.Events;
using System;

namespace MBC.App.BattleshipConsole
{
    /// <summary>
    /// Provides functions that relate to outputting events in the console.
    /// </summary>
    public static class EventOutput
    {
        /// <summary>
        /// Enables the output of a specific event type that is generated in a <see cref="Core.Match"/>.
        /// </summary>
        /// <param name="idx">The current index of the parameter stream.</param>
        /// <param name="param">The string of parameters made by the user.</param>
        public static void Enable(int idx, params string[] param)
        {
            if (MatchRun.CurrentMatch == null)
            {
                Console.WriteLine("No match created. Cannot enable events.");
                return;
            }

            switch (param[idx])
            {
                case "match":
                    MatchRun.CurrentMatch.Event += MatchEventOutput;
                    break;

                case "controller":
                    MatchRun.CurrentMatch.Event += ControllerEventOutput;
                    break;

                case "round":
                    MatchRun.CurrentMatch.Event += RoundEventOutput;
                    break;

                default:
                    Console.WriteLine("Invalid event specified.");
                    break;
            }
        }

        /// <summary>
        /// Enables the output of a specific event type that is generated in a <see cref="Core.Match"/>.
        /// </summary>
        /// <param name="idx">The current index of the parameter stream.</param>
        /// <param name="param">The string of parameters made by the user.</param>
        public static void Disable(int idx, params string[] param)
        {
            if (MatchRun.CurrentMatch == null)
            {
                Console.WriteLine("No match created. Cannot disable events.");
                return;
            }

            switch (param[idx])
            {
                case "match":
                    MatchRun.CurrentMatch.Event -= MatchEventOutput;
                    break;

                case "controller":
                    MatchRun.CurrentMatch.Event -= ControllerEventOutput;
                    break;

                case "round":
                    MatchRun.CurrentMatch.Event -= RoundEventOutput;
                    break;

                default:
                    Console.WriteLine("Invalid event specified.");
                    break;
            }
        }

        /// <summary>
        /// Outputs the event given by <paramref name="ev"/> to the console.
        /// </summary>
        /// <param name="ev">The <see cref="MatchEvent"/> generated by <see cref="MatchRun.CurrentMatch"/>.</param>
        private static void MatchEventOutput(Event ev, bool backward)
        {
            if (ev is MatchEvent)
            {
                Console.WriteLine(ev);
            }
        }

        /// <summary>
        /// Outputs the event given by <paramref name="ev"/> to the console.
        /// </summary>
        /// <param name="ev">The <see cref="RoundEvent"/> generated by a 
        /// <see cref="Core.Round"/> in <see cref="MatchRun.CurrentMatch"/>.</param>
        private static void RoundEventOutput(Event ev, bool backward)
        {
            if (ev is RoundEvent && !(ev is ControllerEvent))
            {
                Console.WriteLine(ev);
            }
        }

        /// <summary>
        /// Outputs the event given by <paramref name="ev"/> to the console.
        /// </summary>
        /// <param name="ev">The <see cref="ControllerEvent"/> generated by a 
        /// <see cref="Shared.Controller"/> in a <see cref="Core.Round"/> in the <see cref="MatchRun.CurrentMatch"/>.</param>
        private static void ControllerEventOutput(Event ev, bool backward)
        {
            if (ev is ControllerEvent)
            {
                Console.WriteLine(ev);
            }
        }
    }
}